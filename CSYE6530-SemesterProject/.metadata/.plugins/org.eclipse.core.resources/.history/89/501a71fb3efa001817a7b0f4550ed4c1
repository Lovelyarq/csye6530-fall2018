/*Written in the classroom
package module7;

import java.util.logging.Logger;

import org.eclipse.californium.core.CoapResource;
import org.eclipse.californium.core.CoapServer;

public class CoapServerConnection {
	//static
	
	private static final Logger _Logger =
			Logger.getLogger(CoapServerConnection.class.getName());
	
	//private var's 
		
		
	
	private CoapServer _coapServer;
		
		
	//Contractors
	
	public CoapServerConnection(String ...resourceNames)
	{
		
	}
		
	/*
	* 
	* Default
	* 
	*
		
		
	public CoapServerConnection() {
		
		super();
		// TODO Auto-generated constructor stub
		_coapServer = new CoapServer();
		
		ResourceTemp 	 resourceTemp     = new ResourceTemp("temp");
		ResourceHumidity resourceHumidity = new ResourceHumidity("humidity");
		
		addResource(resourceTemp);
		addResource(resourceHumidity);
		
	}
	
	//public method
	public void addDefaultResource(String name)
	{
		
	}
	
	public void addResource(CoapResource resource) 
	{
		if(resource != null) {
			_coapServer.add(resource);
		}
	}
		
	
	public void start()
	{
		
		_Logger.info("Starting Server....");
		_coapServer.start();
		
		//CoapServerConnection serverConn = new CoapServerConnection();
		//add resource
		
		//start the server
		//serverConn.start();
	}

	public void stop()
	{
		_coapServer.stop();
	}
	
	
}

*/

package module8;


import java.util.logging.Logger;
import org.eclipse.californium.core.CoapResource;
import org.eclipse.californium.core.CoapServer;


public class CoapServerConnection{
	// static
	private static final Logger _Logger =
			Logger.getLogger(CoapServerConnection.class.getName());
	
	// private var's
	private CoapServer _coapServer;

	// constructors
	public CoapServerConnection(){
		super(); 
	}
	
	// public methods
	public void addResource(CoapResource resource){
		if (resource != null) {
			_coapServer.add(resource);
		}
	}
	
	public void start(){
		if (_coapServer == null) {
			_Logger.info("Creating CoAP server instance and 'temp' handler...");
			_coapServer = new CoapServer();
			//Create a new TempResourceHandler and add it to coapServer 
			TempResourceHandler tempRH = new TempResourceHandler();
			_coapServer.add(tempRH);
		}
		_Logger.info("Starting CoAP server...");
		_coapServer.start();
	}
	
	public void stop(){
		_Logger.info("Stopping CoAP server...");
		_coapServer.stop();
	}
}
 	
