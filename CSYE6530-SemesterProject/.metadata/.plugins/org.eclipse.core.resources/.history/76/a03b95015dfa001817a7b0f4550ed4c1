/**
 * 
 */
package semesterProject;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;


/**
 * @author Ruiqing Jiang
 *
 */
public class MqttClientConnector implements MqttCallback {
	// static
	private static final Logger _Logger = Logger.getLogger(MqttClientConnector.class.getName());

	// private var's
	private String _protocol;
	private String _host = "things.ubidots.com";
	private int _port;
	private MqttClient _Client;
	private String _MqttClientID;
	private String _brokerAddress;
	private String _userName;
	private String _password;
	private String _pemFileName;
	private Boolean _isSecureConn;

	// --------------------------------

	// constructors
	/**
	 * Default.
	 *
	 */
	public MqttClientConnector() {
		// use defaults
	}

	/**
	 * Constructor.
	 *
	 * @param host The name of the broker to connect.
	 * @param isSecure Currently unused.
	 */
	public MqttClientConnector(String host, boolean isSecure) {
		super();
		// NOTE: 'isSecure' ignored for now
		if (host != null && host.trim().length() > 0) {
			_host = host;
		}
		// NOTE: URL does not have a protocol handler for "tcp", construct the URL manually
		_MqttClientID = MqttClient.generateClientId();
		_Logger.info("Using client ID for broker conn: " + _MqttClientID);
		_brokerAddress = _protocol + "://" + _host + ":" + _port;
		_Logger.info("Using URL for broker conn: " + _brokerAddress);
	}

	/**
	 * Constructor.
	 *
	 * @param host
	 * @param userName
	 * @param pemFileName The name of the certificate file to use. If null /
	 *                    invalid, ignored.
	 */
	public MqttClientConnector(String host, String userName, String pemFileName, String password) {
		super();
		if (host != null && host.trim().length() > 0) {
			_host = host;
		}
		if (userName != null && userName.trim().length() > 0) {
			_userName = userName;
		}
		if (pemFileName != null) {
			File file = new File(pemFileName);
			if (file.exists()) {
				_protocol = "ssl";
				_port = 8883;
				_pemFileName = pemFileName;
				_isSecureConn = true;
				_Logger.info("PEM file valid. Using secure connection: " + _pemFileName);
			} else {
				_Logger.warning("PEM file invalid. Using insecure connection: " + pemFileName);
			}
		}
		
		// NOTE: URL does not have a protocol handler for "tcp", construct the URL manually
		_MqttClientID = MqttClient.generateClientId();
		_brokerAddress = _protocol + "://" + _host + ":" + _port;
		_Logger.info("Using URL for broker conn: " + _brokerAddress);
	}
	

	// public methods

	public void connect() {
		if (_Client == null) {
			MemoryPersistence persistence = new MemoryPersistence();
			try {
				System.out.println("_brokerAddr: --" + _brokerAddress);
				System.out.println("_clientID: --" + _MqttClientID);
				_Client = new MqttClient(_brokerAddress, _MqttClientID, persistence);
				//create a MqttConnectionOptions : cOptions
				MqttConnectOptions cOptions = new MqttConnectOptions();
				//setCleanSession = true
				cOptions.setCleanSession(true);
				if (_userName != null) {
					cOptions.setUserName(_userName);
				}
				if (_password != null) {
					cOptions.setPassword(_password.toCharArray());
				}
				if (_isSecureConn) {
					initSecureConnection(cOptions);
				}
				_Client.setCallback(this);
				_Client.connect(cOptions);
				_Logger.info("Connected to broker: " + _brokerAddress);
			} catch (MqttException e) {
				_Logger.log(Level.SEVERE, "Failed!! to connect to broker: " + _brokerAddress, e);
			}
		}
	}
	
	


	//disconnect
	public void disconnect() {
		try {
			_Client.disconnect();
			_Logger.info("Disconnected from broker: " + _brokerAddress);
		} catch (Exception e) {
			_Logger.log(Level.SEVERE, "Failed!! to disconnect from broker: " + _brokerAddress, e);
		}
	}
	
	


	/**
	 * Publishes the given payload to broker directly to topic 'topic'.
	 *
	 * @param topic: destination topic that the message direct to
	 * @param qosLevel: 0: at most once, 1: at least once, 2: exactly once
	 * @param payload
	 */
	public boolean publishMessage(String topic, int qosLevel, byte[] payload) {
		boolean success = false;
		try {
			_Logger.info("Publishing message to topic: " + topic);
			//create a new MqttMessage, pass 'payload' to the constructor
			MqttMessage msg = new MqttMessage(payload);
			
			//set the QoS to qosLevel
			msg.setQos(qosLevel);
			
			//call 'publish' on the MQTT client, passing the 'topic' and MqttMessage
			msg.setRetained(true);
			_Client.publish(topic, msg);
			success = true;
		} catch (Exception e) {
			_Logger.log(Level.SEVERE, "Failed!! to publish MQTT message: " + e.getMessage());
		}
		return success;
	}
	
	


	//subscribeToAll
	public boolean subscribeToAll() {
		try {

			_Client.subscribe("$SYS/#");
			_Logger.log(Level.INFO, "Subscribe to all successfully.");
			return true;
		} catch (MqttException e) {
			_Logger.log(Level.WARNING, "Failed!! to subscribe to all topics.", e);
		}
		return false;
	}

	//subscribeToTopic
	public boolean subscribeToTopic(String topic) {
		try {
			_Client.subscribe(topic);
			_Logger.log(Level.INFO, "Subscribe to Topic successfully.");
			return true;
		} catch (MqttException e) {
			_Logger.log(Level.WARNING, "Failed!! to subscribe to Topic topics.", e);
		}
		return false;
	}

	//connectionLost
	public void connectionLost(Throwable t) {
		_Logger.log(Level.WARNING, "Connection to broker lost. Will retry soon.", t);
	}

	//deliveryComplete
	public void deliveryComplete(IMqttDeliveryToken token) {
		try {

			_Logger.info("Delivery complete: " + token.getMessageId() + " - " + token.getResponse() + " - "
					+ token.getMessage());
		} catch (Exception e) {
			_Logger.log(Level.SEVERE, "Failed to retrieve message from token.", e);
		}
	}

	//messageArrived
	public void messageArrived(String data, MqttMessage msg) throws Exception {
		
		_Logger.info("Message arrived: " + data + ", " + msg.getId());
		_Logger.info("Message plyload: "+ msg.toString());
		System.out.println("ooooooo");
	}

	// ---------------------------------



	private void initSecureConnection(MqttConnectOptions connOpts) {
		try {
			_Logger.info("Configuring TLS...");
			SSLContext sslContext = SSLContext.getInstance("SSL");
			KeyStore keyStore = readCertificate();
			TrustManagerFactory trustManagerFactory = TrustManagerFactory
					.getInstance(TrustManagerFactory.getDefaultAlgorithm());
			trustManagerFactory.init(keyStore);
			sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());
			connOpts.setSocketFactory(sslContext.getSocketFactory());
		} catch (Exception e) {
			_Logger.log(Level.SEVERE, "Failed to initialize secure MQTT connection.", e);
		}
	}

	private KeyStore readCertificate()
			throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
		KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
		FileInputStream fis = new FileInputStream(_pemFileName);
		BufferedInputStream bis = new BufferedInputStream(fis);
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		ks.load(null);
		while (bis.available() > 0) {
			Certificate cert = cf.generateCertificate(bis);
			
			//Set the device name here
			ks.setCertificateEntry("homeiotgateway" + bis.available(), cert);

		}
		return ks;
	}

}